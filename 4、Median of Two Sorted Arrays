        public double FindMedianSortedArrays(int[] nums1, int[] nums2)
        {
            int length1 = nums1.Length, length2 = nums2.Length;
            double result;
            if ((length1 + length2) % 2 != 0)
                result = FindMedianSortedArray(nums1, nums2, 0, 0, length1, length2, (length1 + length2) / 2 + 1);
            else
                result = (FindMedianSortedArray(nums1, nums2, 0, 0, length1, length2, (length1 + length2) / 2) +
                          FindMedianSortedArray(nums1, nums2, 0, 0, length1, length2, (length1 + length2) / 2 + 1)) / 2;
            return result;
        }

        public double FindMedianSortedArray(int[] nums1, int[] nums2, int start1, int start2, int length1, int length2, int k)
        {
            if (length1 > length2)
                return FindMedianSortedArray(nums2, nums1, start2, start1, length2, length1, k);
            if (length1 == 0)
                return nums2[start2 + k - 1];
            if (k == 1)
                return Math.Min(nums1[start1], nums2[start2]);
            var temp1 = Math.Min(k / 2, length1);
            var temp2 = k - temp1;
            if (nums1[start1 + temp1 - 1] > nums2[start2 + temp2 - 1])
            {
                return FindMedianSortedArray(nums1, nums2, start1, start2 + temp2, length1, length2 - temp2, k - temp2);
            }
            if (nums1[start1 + temp1 - 1] < nums2[start2 + temp2 - 1])
            {
                return FindMedianSortedArray(nums1, nums2, start1 + temp1, start2, length1 - temp1, temp2, k - temp1);
            }
            return nums1[start1 + temp1 - 1];
        }
